@inject WApi api

<a href="@($"{api.ItemId}{Item.Entry}")" target="_blank" data-wowhead="item=@Item.Entry" class="small" style="text-decoration:none">
    <b>
        <span style="@ItemColour();font-weight:normal">
            @if (Count > 1)
            {
                @Count

                <span>&nbsp;</span>
            }

            @if (iconName != string.Empty)
            {
                <img src="@imgLink" />
            }
            @Item.Name
            @if (ShowPrice && Item.SellPrice > 0)
            {
                <Money Value="GetItemPrice()" />
            }
            @if (WasRecentlyUpdated())
            {
                <Badge Color="BadgeColor.Info" class="float-right">@ChangeDescription()</Badge>
            }
        </span>
    </b>
</a>

@code {
    private const int MaxLifeTime = 30;

    [Parameter]
    public Item Item { get; set; }

    [Parameter]
    public bool ShowChangesPrice { get; set; } = false;

    [Parameter]
    public bool ShowPrice { get; set; } = false;

    [Parameter]
    public bool ShowIcon { get; set; } = true;

    [Parameter]
    public int Count { get; set; } = 1;

    [Parameter]
    public int LastCount { get; set; } = 1;

    [Parameter]
    public int LastChange { get; set; } = 0;

    [Parameter]
    public DateTime LastUpdated { get; set; } = DateTime.MinValue;

    private string iconName { get; set; } = string.Empty;
    private string imgLink => string.Format(WApi.TinyIconUrl, iconName);

    private static readonly string[] colors = { "#9d9d9d", "#fff", "#1eff00", "#0070dd", "#9345ff", "#ff8000", "#e5cc80", "#e5cc80" };
    private static readonly BadgeColor[] itemBadge = { BadgeColor.Secondary, BadgeColor.Dark, BadgeColor.Success, BadgeColor.Primary, BadgeColor.Warning, BadgeColor.Warning, BadgeColor.Warning, BadgeColor.Warning };

    private static readonly Dictionary<int, string> icons = new()
    {
        { -1, "inv_misc_bag_08" } // Backpack
    };

    protected override async Task OnParametersSetAsync()
    {
        if (!ShowIcon || Item.Entry == 0) return;

        if (icons.TryGetValue(Item.Entry, out var icon))
        {
            iconName = icon;
            return;
        }

        iconName = await api.RequestItemIconName(Item.Entry);
        icons.TryAdd(Item.Entry, iconName);
    }

    private string ItemColour()
    {
        switch (Item.Quality)
        {
            case 1:
                return "";
            default:
                return $"color:{colors[Item.Quality]}";
        }
    }

    private BadgeColor ItemBadge()
    {
        if (Item.Quality < 0 || Item.Quality > 7) { return itemBadge[1]; }
        return itemBadge[Item.Quality];
    }

    private Currency GetItemPrice()
    {
        int value = Count * Item.SellPrice;
        if (ShowChangesPrice)
        {
            value = (LastChange == 0 ? Count : LastChange) * Item.SellPrice;
        }

        return ItemPrice.ToSellPrice(value);
    }

    private bool WasRecentlyUpdated() => (DateTime.UtcNow - LastUpdated).TotalSeconds < MaxLifeTime;

    private string ChangeDescription()
    {
        if (Count == LastCount)
            return "New";

        int change = Count - LastCount;
        return change.ToString("+#;-#");
    }
}